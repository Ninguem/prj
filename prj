#!/bin/sh
 
#  A program to help you manage your projects and your chaotic home directory.
#
#  (C) copyright: by Ningu√©m <spamgithub@rasparta.org>
 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

## INITIALIZATION
#  Let's set up an appropriete environment for myself...
 
### CONFIGURATION
#  Configure me here
# Where do you want your stuff? If you leave this as is, I'll try to get the proper values from the environment.
# Otherwise I'll just use default values, hoping they're ok for you. I can make mistakes, though.

# A directory to store your projects.
# Skip this if you have configured XDG_PROJECTS_DIR in your ~/.config/user-dirs.dirs file.
#projectsdir=~/projects

# A directory to store your archives.
# Skip this if you have configured XDG_BACKUPS_DIR in your ~/.config/user-dirs.dirs file.
#archivesdir=~/backups

# The name of your working directory.
# Skip this if you have configured XDG_DESKTOP_DIR in your ~/.config/user-dirs.dirs file.
#workingdir=~
#workingdir=~/Desktop

# A fancy name for your working category.
workingcategoryname="Desktop"

# It's prefix.
workingcategoryprefix="0"

# What version control system do you want to use?
# Possible options are "git", "hg" (for mercury) or "none" for no use of a VCS. You really should consider using one.
preferredvcs="git"

# What is your preferred file compressor?
# I'll look for one or choose "none" for compression unless you provide me with a value for the next variable.
# Possible values are "bzip2", "gzip", "xz", "compress", "lzip", "lzma", "lzop" or any other provided it is compatible with -I option of the tar command and is accessible to you.
preferredcompressor="bzip2"

# What is your preferred text editor?
# I'll look for one unless you provide me with a value for the next variable.
#preferrededitor=emacs23-nox
preferrededitor="emacs23-nox"

# Are you done with the configurations above? If so, change next variable to "Yes" (note capitalization!).
doneconfiguring="No"

### CONFIGURATION END
#  Stop configuring, your job is done here. Go use me and be marry.
 
### FUNCTIONS
#  Here's how I work:

archiveproject() { # Archives a project.
[ -z "$1" ] && return 1
local command
local destination
local returnvalue
returnvalue=0
case $(basename $preferredcompressor) in
    bzip2)
	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -cpjf"
	destination="$archivesdir/$(gettimestamp).$1.tbz"
	;;
    gzip)
	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -cpzf"
	destination="$archivesdir/$(gettimestamp).$1.tgz"
	;;
    xz)
	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -cpJf"
	destination="$archivesdir/$(gettimestamp).$1.txz"
	;;
    compress)
	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -cpZf"
	destination="$archivesdir/$(gettimestamp).$1.tZ"
	;;
    lzip)
    	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" --lzip -cpf"
    	destination="$archivesdir/$(gettimestamp).$1.tlz"
    	;;
    lzma)
    	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" --lzma -cpf"
    	destination="$archivesdir/$(gettimestamp).$1.tar.lzma"
    	;;
    lzop)
    	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" --lzop -cpf"
    	destination="$archivesdir/$(gettimestamp).$1.tar.lzo"
    	;;
    none)
    	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -cpf"
    	destination="$archivesdir/$(gettimestamp).$1.tar"
    	;;
    *)
	command="tar -C	"$(getcategorydir "$(getprojectcategory "$1")")" -I "$preferredcompressor" -cpf"
	destination="$archivesdir/$(gettimestamp).$1.tar.compressed"
	;;
esac
$command $destination "$1" || returnvalue=1
unset command
unset destination
return $returnvalue
}

askuseryn() { # Asks the user for input. Returns 0 if input is "y" or "Y".
    read answer
    case $answer in
	y|Y)
	    return 0
	    ;;
	*)
	    return 1
	    ;;
    esac
}

checkconfiguration() { # Checks to see if variable "doneconfiguring" is "Yes".
    if [ "$doneconfiguring" != "Yes" ]
    then
	cat << EOF
Configure me first. It'll only take you a moment!
 
EOF
	return 1
    else
	return 0
    fi
}

checkfundamentalprograms() { # Searches for fundamental programs. Returns false if one is missing.
    local returnvalue
    returnvalue=0
    [ $(which which 2>/dev/null) ] || { echo "Cannot find which command."; return 1; }
    for program in basename cat cut date grep head ls mkdir mktemp mv rm sort tail tar touch tr wc $preferredcompressor $preferrededitor
    do
	[ $(which $program) ] ||  { echo "$program: Not found."; returnvalue=1; }
    done
    if [ $returnvalue = 1 ]
    then
	cat << EOF
Sorry, I need those commands to work. Also a compressor and an editor.
You'll need to install them first, or hack on the code!
;-)
 
EOF
    fi
    return $returnvalue
}

createcategory() { # Creates a category.
    local newcategoryname
    local newcategoryprefix
    newcategoryprefix="$(echo "$1"|cut -s -f 1 -d '.')"
    if [ -n "$newcategoryprefix" ]
    then
	newcategoryname=$(echo $1|cut -f 2- -d ".")
    else
	newcategoryname="$1"
    fi
    if [ "$newcategoryprefix" = "" ]
    then
	read -p "Do you want to give a prefix to "$1"? Write it here: " newcategoryprefix
    fi
    if [ -n "$newcategoryprefix" ]
    then
	mkdir $projectsdir/$newcategoryprefix.$newcategoryname
    else
	mkdir $projectsdir/$newcategoryname
    fi
    unset newcategoryname
    unset newcategoryprefix
}

createproject() { # Creates a project.
    [ -z "$1" ] && return 1
    local returnvalue
    returnvalue=0
    local defaultcategorydir
    defaultcategorydir=$(getcategorydir $(getdefaultcategory))
    mkdir "$defaultcategorydir"/"$1" || returnvalue=1
    mkdir "$defaultcategorydir"/"$1"/trash || returnvalue=1
    mkdir "$defaultcategorydir"/"$1"/."$(basename "$0")" || returnvalue=1
    echo ""$1" has not yet been described." >  "$defaultcategorydir"/"$1"/README || returnvalue=1
    echo "* TODO Edit the README and the TODO files." >  "$defaultcategorydir"/"$1"/TODO || returnvalue=1
    case $preferredvcs in
	git)
	    git init "$defaultcategorydir"/"$1" >/dev/null
	    returnvalue=1
	;;
	hg)
	    hg init "$defaultcategorydir"/"$1" >/dev/null
	    returnvalue=1
	;;
	*)
	;;
    esac
    return $returnvalue
}

findinproject() { # Searches for a string in a given project.
    [ -z "$2" ] && return 1
    local expression
    local project
    local match
    project="$1"
    shift
    expression=$@
    match=$(cat $(getcategorydir $(getprojectcategory $project))/$project/README 2>/dev/null | grep -i "${expression}")
    [ -n "$match" ] && echo ""$project README":\n${match}"
    match=$(cat $(getcategorydir $(getprojectcategory $project))/$project/TODO 2>/dev/null | grep -i "${expression}")
    [ -n "$match" ] && echo ""$project TODO":\n${match}"
    unset expression
    unset project
    unset match
}

fixproject() { # Turns an ordinary directory into a propper project.
    [ -z "$1" ] && return 1
    returnvalue=0
    [ -f $(getcategorydir $(getprojectcategory "$1"))/"$1"/README ] || echo ""$1" has not yet been described." > $(getcategorydir $(getprojectcategory "$1"))/"$1"/README || returnvalue=1
    [ -f $(getcategorydir $(getprojectcategory "$1"))/"$1"/TODO ] || echo "* TODO Edit the README and the TODO files." > $(getcategorydir $(getprojectcategory "$1"))/"$1"/TODO || returnvalue=1
    [ -d $(getcategorydir $(getprojectcategory "$1"))/"$1"/.$0 ] || mkdir $(getcategorydir $(getprojectcategory "$1"))/"$1"/.$(basename $0) || returnvalue=1
    [ -d $(getcategorydir $(getprojectcategory "$1"))/"$1"/trash ] || mkdir $(getcategorydir $(getprojectcategory "$1"))/"$1"/trash || returnvalue=1
    case "$preferredvcs" in
	git)
	[ -d $(getcategorydir $(getprojectcategory "$1"))/"$1"/.git ] || git init -q $(getcategorydir $(getprojectcategory "$1"))/"$1" || returnvalue=1
	;;
	hg)
	[ -d $(getcategorydir $(getprojectcategory "$1"))/"$1"/.hg ] || hg init $(getcategorydir $(getprojectcategory "$1"))/"$1" || returnvalue=1
	;;
	*)
	;;
    esac
    return $returnvalue
}

getarchivetimestamp() { # Ecoes the latest version of an archived project.
    [ -z "$1" ] && return 1
    local archive
    local archivedate
    archive=$(ls "$archivesdir"/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]."$1".* 2>/dev/null | sort | tail -n 1)
    [ -z "$archive" ] && return 1
    [ -r "$archive" ] || return 1
    archivedate=$(echo $(basename "$archive") | cut -f 1 -d ".")
    [ -z "$archivedate" ] && return 1
    echo $archivedate
    unset archive
    unset archivedate
    return 0
}

getcategorydir() { # Outputs the directory name of a given category.
    [ -z "$1" ] && return 1
    local dir
    [ ! -d $projectsdir/$1 ] && [ ! -d $projectsdir/$1.*/ ] && [ ! -d $projectsdir/*.$1/ ] && return 1
    [ -d $projectsdir/$1.* ] && dir="$(echo $projectsdir/$1.* | cut -f 1 -d " ")"
    [ -d $projectsdir/*.$1 ] && dir="$(echo $projectsdir/*.$1 | cut -f 1 -d " ")"
    [ -d $projectsdir/$1 ] && dir="$projectsdir/$1"
    echo "$dir"
    unset dir
    return 0
}

getcategoryname() { # Echoes the name of a category given by its prefix, name or prefix.name.
    [ -z "$1" ] && return 1
    local dir
    [ ! -d "$(echo $projectsdir/$1.*/ | cut -f 1 -d " ")"  ] && [ ! -d "$(echo $projectsdir/*.$1/ | cut -f 1 -d " ")" ] && [ ! -d"$(echo $projectsdir/$1/ | cut -f 1 -d " ")" ] && return 1
    [ -d "$(echo $projectsdir/$1/ | cut -f 1 -d " ")" ] && dir="$projectsdir/$1/"
    [ -d "$(echo $projectsdir/*.$1/ | cut -f 1 -d " ")" ] && dir="$(echo $projectsdir/*.$1/ | cut -f 1 -d " ")"
    [ -d "$(echo $projectsdir/$1.*/ | cut -f 1 -d " ")" ] && dir="$(echo $projectsdir/$1.*/ | cut -f 1 -d " ")"
    echo "$(basename "$dir")" | cut -f 2 -d "."
    unset dir
    return 0
}

getcategoryprefix() { # Echoes the prefix of a category given by its prefix, name or prefix.name.
    [ -z "$1" ] && return 1
    local dir
    if [ "$1" = "$workingcategoryprefix" ] || [ "$1" = "$workingcategoryname" ] || [ "$1" = "$workingcategoryprefix.$workingcategoryname" ]
    then
	echo "$workingcategoryprefix"
    else
	[ ! -d $projectsdir/$1 ] && [ ! -d $projectsdir/$1.* ] && [ ! -d $projectsdir/*.$1 ] && return 1
	[ -d $projectsdir/$1.* ] && dir="$(echo $projectsdir/$1.* | cut -f 1 -d " ")"
	[ -d $projectsdir/*.$1 ] && dir="$(echo $projectsdir/*.$1 | cut -f 1 -d " ")"
	[ -d $projectsdir/$1 ] && dir="$projectsdir/$1/"
	echo "$(basename "$dir")" | cut -f 1 -d "."
    fi
    unset dir
    return 0
}

getcategorystatus() { # Prints the prefix.name, and number of projects in category.
    [ -z "$1" ] && return 1
    echo "[$(getcategoryname "$1")]\nprefix: $(getcategoryprefix "$1")\nprojects: $(listcategoryprojects "$1" | wc -l)"
    return 0
}

getdefaultcategory() { # Prints the prefix.name of the default category (the first one in collation order depending on the locale setup) or fails if none found.
    defaultcategory=$(basename $(echo $projectsdir/*/ | cut -f 1 -d " "))
    [ "$defaultcategory" = "*" ] && unset defaultcategory && return 1
    [ -n "$defaultcategory" ] && echo "$defaultcategory"
}

gethomesetup() { # Fills the values of projectsdir, workingdir and archivesdir with configured values or tryes to create them with default values.
    local returnvalue
    returnvalue=0
    [ -r ~/.config/user-dirs.dirs ] && . ~/.config/user-dirs.dirs
    [ -z "$projectsdir" -a -n "$XDG_PROJECTS_DIR" ] && projectsdir="$XDG_PROJECTS_DIR"
    [ -z "$projectsdir" ] && projectsdir=~/projects
    [ -z "$workingdir" -a -n "$XDG_DESKTOP_DIR" ] && workingdir="$XDG_DESKTOP_DIR"
    [ -z "$workingdir" ] && workingdir=~
    [ -z "$archivesdir" -a -n "$XDG_BACKUPS_DIR" ] && archivesdir="$XDG_BACKUPS_DIR"
    [ -z "$archivesdir" ] && archivesdir=~/backups
    [ -d $projectsdir ] || mkdir -p $projectsdir 2>/dev/null || { echo "Cannot access or create your projects directory."; returnvalue=1; }
    [ -w $projectsdir ] || { echo "Cannot write to your projects directory."; returnvalue=1; }
    [ -d $workingdir ] || mkdir -p $workingdir 2>/dev/null || { echo "Cannot access or create your working directory."; returnvalue=1; }
    [ -w $workingdir ] || { echo "Cannot write to your working directory."; returnvalue=1; }
    [ -d $archivesdir ] || mkdir -p $archivesdir 2>/dev/null || { echo "Cannot access or create your archives directory."; returnvalue=1; }
    [ -w $archivesdir ] || { echo "Cannot write to your archives directory."; returnvalue=1; }
    return $returnvalue
}

getid() { # Is this a project or a category?
    [ -z "$1" ] && return 1
    [ -d "$workingdir"/$1 ] && { echo "project"; return 0; }
    [ -d "$projectsdir"/*/"$1" ] && { echo "project"; return 0; }
    [ -d "$projectsdir"/"$1" ] && { echo "category"; return 0; }
    [ -d "$projectsdir"/"$1".* ] && { echo "category"; return 0; }
    [ -d "$projectsdir"/*."$1" ] && { echo "category"; return 0; }
    [ "$1" = "$workingcategoryname" ] && { echo "category"; return 0; }
    [ "$1" = "$workingcategoryprefix" ] && { echo "category"; return 0; }
    return 1
}

getpreferredcompressor() { # Which is the preferred compressor?
    if [ -z "$preferredcompressor" ]
    then
	preferredcompressor=$(basename $(which bzip2)) || preferredcompressor=$(basename $(which gzip)) || preferredcompressor=$(basename $(which xz)) || preferredcompressor=$(basename $(which compress)) || preferredcompressor=$(basename $(which lzop)) || preferredcompressor="none"
    fi
    [ -n "$preferredcompressor" ] && return 0 || return 1
}

getpreferrededitor() { # Which is the preferred editor?
    if [ -z "$preferrededitor" ]
    then
	preferrededitor=$(which $EDITOR) || preferrededitor=$(which editor) || preferrededitor=$(which emacs) || preferrededitor=$(which vi) || preferrededitor=$(which vim) || preferrededitor=$(which nano) || unset preferrededitor
    fi
    [ -n "$preferrededitor" ] && return 0 || return 1
}

getprojectcategory() { # What category is a given project in?
    [ -z "$1" ] && return 1
    [ -d "$projectsdir"/*/"$1" ] && { echo "$(basename $(dirname $(echo "$projectsdir"/*/"$1")) | cut -f 2 -d "." )"; return 0; }
    return 1
}

getprojectstatus() { # Prints a report of a projects status.
    [ -z "$1" ] && return 1
    local projectdir
    projectdir="$(getcategorydir $(getprojectcategory "$1"))/"$1""
    echo "Project: "$1""
    [ -r "$projectdir"/README ] && { printf "Description: "; head -n 1 "$projectdir"/README; } || returnvalue=1
    if [ -d "$projectdir"/.git ]
    then
	echo "By: $(git --git-dir="$projectdir"/.git config --get user.name) <$(git --git-dir="$projectdir"/.git config --get user.email)>"
    else
	echo "By: $USERNAME"
    fi
    echo "Category: $(getprojectcategory "$1")"
    if [ -r "$projectdir"/TODO ]
    then
	oldifs=$IFS
	IFS='
'
	for task in $(grep ^'* TODO' "$projectdir"/TODO|cut -f 3- -d " ")
	do
	    echo Task: "$task"
	done
	IFS=$oldifs
	unset oldifs
    fi || returnvalue=1
    if [ $(ls "$projectdir"/."$(basename $0)"/ 2>/dev/null | grep .sh$ | wc -w) -gt 0 ]
    then
    	local script
	for script in "$projectdir"/."$(basename $0)"/*.sh
	do
	    printf "Script: $(basename $script .sh) - "
	    $script aboutme
	done
    	unset script
    fi
    if [ $(ls "$projectdir"/."$(basename $0)"/ 2>/dev/null | grep ^"depends-" | wc -w) -gt 0 ]
    then
    	local dependency
	for dependency in "$projectdir"/."$(basename $0)"/depends-*
	do
	    printf "Depends on: "
	    echo "$(basename $dependency)" | cut -f 2 -d "-"
	done
    	unset dependency
    fi
    unset projectdir
    return $returnvalue
}

gettimestamp() { # Echoes a timestamp of current time.
    echo "$(date +%Y-%m-%d)"
}

killarchive() { # Deletes an archived project.
[ -z $1 ] && return 1
local archive
local returnvalue
returnvalue=0
case $(basename $preferredcompressor) in
     bzip2)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tbz
	;;
    gzip)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tgz
    	;;
    xz)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".txz
	;;
    compress)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tZ
	;;
    lzip)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tlz
	;;
    lzma)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tar.lzma
	;;
    lzop)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tar.lzo
	;;
    none)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tar
	;;
    *)
	archive="$archivesdir"/$(getarchivetimestamp $1)."$1".tar.compressed
    	;;
esac
rm $archive || returnvalue=1
unset archive
return $returnvalue
}

killcategory() { # Removes an entire category!
    [ -z "$1" ] && return 1
    local categorydir
    categorydir="$(getcategorydir "$(getcategoryname "$1")")"
    rm -fr "$categorydir"
    local returnvalue
    [ -d "$categorydir" ] && returnvalue=1 || reuturnvalue=0    
    unset categoryname
    unset categorydir
    return $returnvalue
}

killproject() { # Removes a project!
    [ -z "$1" ] && return 1
    rm -fr $(getcategorydir $(getprojectcategory "$1"))/"$1"
    [ -d  $(getcategorydir $(getprojectcategory "$1"))/"$1" ] && return 1 || return 0
}

listarchives() { # Lists archived projects.
    ls -1 $archivesdir && return 0
    return 1
}

listcategories() { # Lists all the category names. Excludes the prefixes.
    ls -1r "$projectsdir" | cut -f 2- -d "."
}

listcategoryprojects() { # List all projects of a given category.
    [ -z "$1" ] && return 1
    local dir
    dir=$(getcategorydir $1)
    [ -z "$dir" ] && return 1
    ls -1 "$dir"
    unset dir
    return 0
}

moveproject() { # Moves a project to another category.
    local origin
    local destiny
    origin="$(getcategorydir "$(getprojectcategory "$1")")"
    destiny="$(getcategorydir "$2")"
    mv "$origin"/"$1" "$destiny" && return 0
    unset origin
    unset destiny
}

printhelpmessage() { # Prints the standard help message.
    cat << EOF
Name:
	$(basename $0) - A program to help you manage your projects and your chaotic home directory.
 
Usage:
	$(basename $0) [do] <projectname>
	$(basename $0) [done | fix | kill] <projectname(s)>
	$(basename $0) [help | listarchives|lsa | listcategories|lsc]
	$(basename $0) [killcategory] <categoryname(s)>
	$(basename $0) [list|ls | listprojects|lsp] [<categoryname(s)>]
	$(basename $0) [move|mv] <projectname> <categoryname>
	$(basename $0) [new] <projectname(s)>
	$(basename $0) [newcategory] <categoryname(s)>
	$(basename $0) [read | todo] <projectname>
	$(basename $0) [rename|rn] <projectname> <projectname>
	$(basename $0) [run] <projectname> <scriptname> [<scriptargument(s)]
	$(basename $0) [find] <expression>
	$(basename $0) [status|st] [<categoryname(s)>|<projectname(s)>]
	$(basename $0) [redo | undone] <archive(s)>
 
EOF
}

renameproject() { # Gives a project a new name.
    [ -z "$1" ] || [ -z "$2" ] && return 1
    mv $(getcategorydir $(getprojectcategory "$1"))/"$1"  $(getcategorydir $(getprojectcategory "$1"))/"$2" && return 0
    return 1
}

startproject() {
    [ -z $1 ] && return 1
    ln -s $(getcategorydir $(getprojectcategory "$1"))/"$1" "$workingdir"/"$1" && return 0
    return 1
}

unarchiveproject() { # Extracts the archived project into the default category directory.
[ -z $1 ] && return 1
local defaultcategory
local command
local origin
local returnvalue
returnvalue=0
defaultcategory="$(getdefaultcategory || return 1)"
case $(basename $preferredcompressor) in
    bzip2)
	command="tar -C "$projectsdir/$defaultcategory" -xpjf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tbz"
	;;
    gzip)
    	command="tar -C "$projectsdir/$defaultcategory" -xpzf"
    	origin="$archivesdir/$(getarchivetimestamp $1).$1.tgz"
    	;;
    xz)
	command="tar -C "$projectsdir/$defaultcategory" -xpJf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.txz"
	;;
    compress)
	command="tar -C "$projectsdir/$defaultcategory" -xpZf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tZ"
	;;
    lzip)
	command="tar -C "$projectsdir/$defaultcategory" --lzip -xpf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tlz"
	;;
    lzma)
	command="tar -C "$projectsdir/$defaultcategory" --lzma -xpf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tar.lzma"
	;;
    lzop)
	command="tar -C "$projectsdir/$defaultcategory" --lzop -xpf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tar.lzo"
	;;
    none)
	command="tar -C "$projectsdir/$defaultcategory" -xpf"
	origin="$archivesdir/$(getarchivetimestamp $1).$1.tar"
	;;
    *)
    	command="tar -C "$projectsdir/$defaultcategory" -I "$preferredcompressor" -xpf"
    	origin="$archivesdir/$(getarchivetimestamp $1).$1.tar.commpressed"
    	;;
esac
$command $origin || returnvalue=1
unset defaultcategory
unset command
unset origin
return $returnvalue
}

### FUNCTIONS END

## INITIALIZATION END
#  Should be all set now.

## CHECKS
# Before I start making mistakes.

# Before anything else, am I configured?
checkconfiguration || exit 1

# What is yout preferred file compressor?
getpreferredcompressor || exit 1

# What is your preferred text editor?
getpreferrededitor || exit 1

# Do I have access to fundamental programs I need?
checkfundamentalprograms || exit 1

# Have you configured your freedesktop propperly?
gethomesetup || exit 1
 
## CHECKS END

## MAIN
#  Let's work, then...
case $1 in # If verb ($1) is:
    done) # Archives a project.
	[ -z "$2" ] &&  { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for project in $@
	do
	    if [ "$(getid $project)" != "project" ]
	    then
		echo "$project: Not found."
		returnvalue=1
	    elif [ -f "$archivesdir"/$(gettimestamp)."$project".* ]
	    then
		echo "$project: already archived today. Rename the project or deal with the archive."
		returnvalue=1
	    else
		archiveproject "$project" || returnvalue=1
		[ $returnvalue -eq 0 ] && killproject "$project" || returnvalue=1
	    fi
	done
	return $returnvalue    
	;;

    easteregg|egg) # Undocumented! ;-)
	echo "You have $(for category in $(listcategories); do listcategoryprojects "$category"; done|wc -l) projects in $(listcategories|wc -l) categories!"
	return 0
	;;

    find) # Searches for an expression in all projects.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	expression="$@"
	for category in $(listcategories)
	do
	    for project in $(listcategoryprojects $category)
	    do
		findinproject $project ${expression}
	    done
	done
	;;

    fix) # Turns an ordinary directory into a propper project.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	for project in "$@"
	do
	    fixproject $project || returnvalue=1
	done
	return $returnvalue
        ;;

    help) # Prints the standard help message without failing.
	printhelpmessage
	[ -n "$2" ] && return 1 || return 0
	;;

    kill) # Completely whipes a project out of existence.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for project in $@
	do
	    category="$(getprojectcategory "$project")"
	    if [ "$category" = "" ]
	    then
		echo "$project: Not found."
		returnvalue=1
	    else
		echo "Remove $project permanently? (y/N) "
		askuseryn && { killproject "$project"; [ $? -eq 0 ] || returnvalue=1 ; } || echo "Whize decision!"
	    fi
	done
	return $returnvalue
	;;

    killcategory) # Removes an empty category, if not the working category.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for category in $@
	do
	    if [ "$(getcategoryname "$category")" = "$workingcategoryname" ]
	    then
		echo "$category: Cannot kill your working category."
		returnvalue=1
	    elif [ "$(getid "$category")" != "category" ]
	    then
		echo "$category: Not found."
		returnvalue=1
	    else
		categorydir="$(getcategorydir "$category")"
		[ -z "$(ls -A $categorydir)" ] && { killcategory "$category"; [ $? -eq 0 ] || returnvalue=1 ; }  || { echo "$category: Not empty."; returnvalue=1; }
	    fi
	done
	return $returnvalue
	;;

    list|ls) # Lists projects in all or given categories.
	if [ -z "$2" ]
	then
	    for category in $(listcategories)
	    do
		echo
		echo "[$category]"
		listcategoryprojects $category
	    done
	    return 0
	else
	    shift
	    returnvalue=0
	    for category in $@
	    do
		if [ -z "$(getcategoryname $category)" ]
		then
		    echo
		    echo "$category: Not found."
		    returnvalue=1
		else
		    echo
		    listcategoryprojects $category
		fi
	    done
	    return $returnvalue
	fi
	;;

    listarchives|lsa) # Lists archived projects.
	if [ -n "$2" ]
	then
	    for archive in $@
	    do
		[ -f $(echo $archivesdir/*$archive* |cut -f 1 -d " ") ] && echo $archivesdir/*$archive*
	    done
	else
	    listarchives
	fi
	return $?
	;;

    listcategories|lsc) # Lists all the categories.
	[ -n "$2" ] && { printhelpmessage; exit 1; }
	listcategories
	return $?
	;;

    listprojects|lsp) # Lists all projects or just the ones in a given category.
	if [ -z "$2" ]
	then
	    for category in $(listcategories)
	    do
		listcategoryprojects "$category"
	    done
	    return 0
	else
	    shift
	    returnvalue=0
	    for category in $@
	    do
		listcategoryprojects "$category"
		[ $? -eq 0 ] || returnvalue=1
	    done
	    return $returnvalue
	fi
	;;

    move|mv) # Moves a project to another category.
	[ "$(getid "$2")" != "project" ] || [ "$(getid "$3")" != "category" ] || [ -n "$4" ] && { printhelpmessage; exit 1; }
	origin="$(getcategorydir "$(getprojectcategory "$2")")"
	destiny="$(getcategorydir "$3")"
	[ "$origin" = "$destiny" ] && { echo "$2 already in $(getcategoryname "$3")."; return 1; }
	moveproject "$2" "$3" && return 0
	;;

    new) # Creates a new project.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for project in $@
	do
	    if [ "$(getid "$project")" = "project" ]
	    then
		echo "$project: Already exists."
		returnvalue=1
	    else
		createproject $project
		[ $? -eq 0 ] || returnvalue=1
	    fi
	done
	return $returnvalue
	;;

    newcategory) # Creates a new category.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for category in $@
	do
	    if [ "$(getid "$category")" = "category" ]
	    then
		echo "$(getcategoryname "$category"): Already exists."
		returnvalue=1
	    else
		createcategory $category
		[ $? -eq 0 ] || returnvalue=1
	    fi
	done
	return $returnvalue
	;;

    read) # Edits the README file.
	[ -z "$2" ] || [ -n "$3" ] && { printhelpmessage; exit 1; }
	[ -z $(getid "$2") ] || [ $(getid "$2") != "project" ] && { echo ""$2": Not found."; exit 1; }
	[ ! -r $(getcategorydir $(getprojectcategory "$2"))/"$2"/README ] && { echo ""$2": README not found."; exit 1; }
	$preferrededitor $(getcategorydir $(getprojectcategory "$2"))/"$2"/README
	;;

    redo) # Unarchives a project and keeps the archive.
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for archive in $@
	do
	    if [ -z "$(ls "$archivesdir"/*."$archive".* 2>/dev/null)" ] 
	    then
		echo ""$archive": not found."
		returnvalue=1
	    else
		unarchiveproject $archive || returnvalue=1
	    fi
	done
	return $returnvalue
	;;

    rename|rn) # Renames a project.
	[ -z "$2" ] || [ -z "$3" ] || [ -n "$4" ] && { printhelpmessage; exit 1; }
	[ "$(getid "$2")" != "project" ] && { printhelpmessage; exit 1; }
	[ -n "$(getid "$3")" ] && { printhelpmessage; exit 1; }
	renameproject "$2" "$3"
	;;

    run) # Runs a given script from a given project with parameters greater than the 4th as parameters.
	[ -z "$2" ] || [ -z "$3" ]  && { printhelpmessage; exit 1; }
	[ "$(getid "$2")" != "project" ] && { echo ""$2": Not found."; exit 1; }
	script="$(getcategorydir $(getprojectcategory "$2"))"/"$2"/.$(basename $0)/"$3".sh
	if [ -x "$script" ]
	then
	    shift
	    shift
	    shift
	    $script "$@" && return 0
	else
	    echo ""$3": Not found."
	    return 1
	fi
	echo ""$2": "$3": Something whent wrong!"
	return 1
	;;

    start) # Start working on one or several projects.
	for argument in "@"
	do
	    startproject "$1"
	done
	;;

    status|st) # Prints a global status or the status of a given category or a given project.
	if [ -z "$2" ]
	then
	    for category in $(listcategories)
	    do
		echo ""
		getcategorystatus "$category"
	    done
	    for project in $(listcategoryprojects $workingcategoryname)
	    do
		echo ""
		getprojectstatus "$project"
	    done
	else
	    shift
	    returnvalue=0
	    for argument in "$@"
	    do
		echo ""
		case $(getid $argument) in
		    project)
			getprojectstatus "$argument" || returnvalue=1
			;;
		    category)
			getcategorystatus "$argument" || returnvalue=1
			;;
		    *)
			echo ""$argument": Not found."
			returnvalue=1
			;;
		esac
	    done
	fi
	return $returnvalue
	;;

    todo) # Edits the TODO file.
	[ -z "$2" ] || [ -n "$3" ] && { printhelpmessage; exit 1; }
	[ -z $(getid "$2") ] || [ $(getid "$2") != "project" ] && { echo ""$2": Not found."; exit 1; }
	[ ! -r $(getcategorydir $(getprojectcategory "$2"))/"$2"/TODO ] && { echo ""$2": TODO not found."; exit 1; }
	case $preferrededitor in
	    *"emacs"*) editorparameters="-f org-mode" ;;
	    *) ;;
	esac
	$preferrededitor $(getcategorydir $(getprojectcategory "$2"))/"$2"/TODO $editorparameters
	;;

    undone) # Unarchives a project and removes the archive!
	[ -z "$2" ] && { printhelpmessage; exit 1; }
	shift
	returnvalue=0
	for archive in $@
	do
	    if [ -z "$(ls "$archivesdir"/*."$archive".* 2>/dev/null)" ] 
	    then
		echo ""$archive": Not found."
		returnvalue=1
	    else
		unarchiveproject $archive || returnvalue=1
		killarchive $archive || returnvalue=1
	    fi
	done
	return $returnvalue
	;;

    *) # In every other case print the standard help and fail.
	printhelpmessage
	return 1
	;;
esac
return $?
## MAIN END :-)
