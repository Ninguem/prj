#!/bin/sh
 
#  A program to help you manage your projects and your chaotic home directory.
#
#  (C) copyright: by Ningu√©m <spamgithub@rasparta.org>
 
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

## CONFIGURATION
## Configure me here:

# Assign suitable names to category0name, category1name, category2name and category3name variables to classify your projects.
category0name="Desktop"
category1name="Projects"
category2name="Ideas"
category3name="Dreams"

# Are you done with the configurations above? If so, change next variable to "Yes" (note capitalization!).
doneconfiguring=No
## END OF CONFIGURATION
## Stop configuring, your task is done here. Go use me and be marry.

## AUTO-SETUP
## Let's define a working environment for myself...

# What to do if I am not configured?
execnotconfigured () {
    cat << EOF
Configure me first. It'll only take you a moment!

EOF
    exit 1
}

# What to do if I can't have what I need?
execinstalldependenciesfirst () {
    cat << EOF
Sorry, I need, at least, which, basename, bzip2, cat, cut, date, grep, head, ls, mv, rm, sort, tail, tar, touch, tr and wc commands to work.
You'll need to install them first, or hack on the code!
Also column and less or more would be nice.
;-)

EOF
    exit 1
}

# What to show if in pannic?
printhelpmessage () {
    cat << EOF
Name:
	$(basename $0) - A program to help you manage your projects and your chaotic home directory.

Usage:
	$(basename $0) [help]
	$(basename $0) list [<CategoryName>|<CategoryNumber>]
	$(basename $0) about|do|done|kill|new|next|show|todo|undone <Project>
	$(basename $0) move|mv <Project> <CategoryName>|<CategoryNumber>
	$(basename $0) search <ProjectName>|<Expression>
	$(basename $0) run <ProjectName> <ScriptName> [<ScriptParamenters>]
	$(basename $0) rename <ProjectInicialName> <ProjectFinalName>

EOF
}

# What to show if asked to remove something that is not supposed to be removed?
printstandardproject () {
	    cat << EOF
This project doesn't seem to be suitable for moving away from your working directory.
It has a .hidden file in it meaning it is meant to stay in there and look pretty.
If this is not the case, remove the file and try again.

EOF
	    exit 1
}

# Have you configured me propperly?...
[ "$doneconfiguring" != "Yes" ] && execnotconfigured

# Let's number your categorys:
category0number="0"
category1number="1"
category2number="2"
category3number="3"

# Have you configured your freedesktop propperly?
[ -r ~/.config/user-dirs.dirs ] && . ~/.config/user-dirs.dirs
[ -n "$XDG_DOCUMENTS_DIR" ] && workingdir="$XDG_DOCUMENTS_DIR" || workingdir=~
[ -n "$XDG_BACKUPS_DIR" ] && backupsdir="$XDG_BACKUPS_DIR" || backupsdir=~
[ -n "$XDG_PROJECTS_DIR" ] && projdbdir="$XDG_PROJECTS_DIR" || projdbdir=~

# Do you have git installed?
[ $(which git) ] && gitinstalled="Yes" || gitinstalled="No"

# How would you want stuff displayed to you?
displayer=$(which less) || displayer=$(which more) || displayer=$(which cat)

# Can I display stuff in columns?
[ $(which column) ] && columnformat="Yes" || columnformat="No"

# Have you configured me?...
[ -z "$projdbdir" ] && execnotconfigured
# ...propperly?!
[ ! -r "$projdbdir" ] && execnotconfigured
[ ! -w "$projdbdir" ] && execnotconfigured

# Do I have access to fundamental programs I need?
[ $(which which 2>/dev/null) ] || execinstalldependenciesfirst
[ -n "$displayer" ] || execinstalldependenciesfirst
[ $(which basename) ] || execinstalldependenciesfirst
[ $(which bzip2) ] || execinstalldependenciesfirst
[ $(which cat) ] || execinstalldependenciesfirst
[ $(which cut) ] || execinstalldependenciesfirst
[ $(which date) ] || execinstalldependenciesfirst
[ $(which grep) ] || execinstalldependenciesfirst
[ $(which head) ] || execinstalldependenciesfirst
[ $(which ls) ] || execinstalldependenciesfirst
[ $(which mkdir) ] || execinstalldependenciesfirst
[ $(which mv) ] || execinstalldependenciesfirst
[ $(which rm) ] || execinstalldependenciesfirst
[ $(which sort) ] || execinstalldependenciesfirst
[ $(which tail) ] || execinstalldependenciesfirst
[ $(which tar) ] || execinstalldependenciesfirst
[ $(which touch) ] || execinstalldependenciesfirst
[ $(which tr) ] || execinstalldependenciesfirst
[ $(which wc) ] || execinstalldependenciesfirst

## Ok, let's continue, then...
case $1 in

    about)
	if [ -z "$2" ]
	then
	    printhelpmessage
	    exit 1
	else
	    shift
	    for argument in "$@"
	    do
		case "$argument" in
		    $category0name)
		    echo "* \"$argument\" is a category (numbered $category0number) with $(eval echo $workingdir/* |wc -w) projects in it."
		    echo
		    ;;
		    $category0number)
		    echo "* $argument is a category (named \"$category0name\") with $(eval echo $workingdir/* |wc -w) projects in it."
		    echo
		    ;;
		    $category1name)
		    echo "* \"$argument\" is a category (numbered $category1number) with $(eval echo $projdbdir/1.* |wc -w) projects in it."
		    echo
		    ;;
		    $category1number)
		    echo "* $argument is a category (named \"$category1name\") with $(eval echo $projdbdir/1.* |wc -w) projects in it."
		    echo
		    ;;
		    $category2name)
		    echo "* \"$argument\" is a category (numbered $category2number) with $(eval echo $projdbdir/2.* |wc -w) projects in it."
		    echo
		    ;;
		    $category2number)
		    echo "* $argument is a category (named \"$category2name\") with $(eval echo $projdbdir/2.* |wc -w) projects in it."
		    echo
		    ;;
		    $category3name)
		    echo "* \"$argument\" is a category (numbered $category3number) with $(eval echo $projdbdir/3.* |wc -w) projects in it."
		    echo
		    ;;
		    $category3number)
		    echo "* $argument is a category (named \"$category3name\") with $(eval echo $projdbdir/3.* |wc -w) projects in it."
		    echo
		    ;;
		    *)
			if ([ ! -d "$workingdir"/"$argument" ] && [ ! -d "$projdbdir/"[1-3]".$argument" ])
			then
			    echo "Sorry, cannot find \"$argument\"!"
			    echo
			else
			    [ -d "$workingdir"/"$argument" ] && echo "* \"$argument\" in \"$category0name\" ($category0number)."
			    [ -d "$projdbdir"/1."$argument" ] && echo "* \"$argument\" in \"$category1name\" ($category1number)."
			    [ -d "$projdbdir"/2."$argument" ] && echo "* \"$argument\" in \"$category2name\" ($category2number)."
			    [ -d "$projdbdir"/3."$argument" ] && echo "* \"$argument\" in \"$category3name\" ($category3number)."
			    if [ "$gitinstalled" = "Yes" ]
			    then
				if [ -d "$workingdir"/"$argument"/.git ]
				then
				    echo "By: $(git --exec-path="$workingdir"/"$argument" config --get user.name) <$(git --exec-path="$workingdir"/"$argument" config --get user.email)>"
				elif [ -d "$projdbdir"/[1-3]."$argument"/.git ]
				then
				    echo "By: $(git --exec-path="$projdbdir"/[1-3]."$argument" config --get user.name) <$(git --exec-path="$projdbdir"/[1-3]."$argument" config --get user.email)>"
				else
				    echo "By: $USERNAME"
				fi
			    else
				echo "By: $USERNAME"
			    fi
			    if [ -d "$workingdir"/"$argument" ]
			    then
				if [ -r "$workingdir"/"$argument/README" ]
				then
				    head -n 1 "$workingdir"/"$argument"/"README"
				else
				    echo "You didn't provide a README file for \"$argument\" yet!"
				fi
				if [ -f "$workingdir/$argument/TODO" ]
				then
				    echo "Tasks: $(grep ^"*\ TODO" "$workingdir/$argument/TODO" | wc -l) listed."
				    echo "Next task: $(grep ^"*\ TODO" "$workingdir/$argument/TODO" | cut -f 3- -d " " | head -n 1)"
				else
				    echo "Tasks: You didn't provide a TODO file for \"$(basename $argument)\" yet!"				    
				    echo "Next task: You didn't provide a TODO file for \"$(basename $argument)\" yet!"				    
				fi
				if [ $(ls "$workingdir/$argument/.$(basename $0)/" 2>/dev/null | grep .sh$ | wc -w) -gt 0 ]
				then
				    for script in $(eval ls "$workingdir/$argument/.$(basename $0)/"*.sh 2>/dev/null )
				    do
					if [ -x $script ]
					then
					    scriptname=$(basename $script .sh)
					    echo "Script: $scriptname - $($0 run $argument $scriptname aboutme)"
					fi
				    done
				fi
				if [ $(ls "$workingdir/$argument/.$(basename $0)/" 2>/dev/null | grep ^depends | wc -w) -gt 0 ]
				then
				    for dependency in $(eval ls "$workingdir/$argument/.$(basename $0)/depends-"* 2>/dev/null )
				    do
					echo "Depends on: $(echo $dependency|cut -f 2- -d "-")"
				    done
				fi
			    elif [ -d "$projdbdir"/[1-3]."$argument" ]
			    then
				if [ -r "$projdbdir"/[1-3]."$argument/README" ]
				then
				    head -n 1 "$projdbdir"/[1-3]."$argument"/"README"
				else
				    echo "You didn't provide a README file for \"$argument\" yet!"
				fi
				if [ -f "$projdbdir/"[1-3]."$argument/TODO" ]
				then
				    echo "Tasks: $(grep ^"*\ TODO" "$projdbdir/"[1-3]."$argument/TODO" | wc -l) listed."
				    echo "Next task: $(grep ^"*\ TODO" "$projdbdir/"[1-3]."$argument/TODO" | cut -f 3- -d " " | head -n 1)"
				else
				    echo "Tasks: You didn't provide a TODO file for \"$(basename $argument)\" yet!"				    
				    echo "Next task: You didn't provide a TODO file for \"$(basename $argument)\" yet!"				    
				fi
				if [ $(ls "$projdbdir"/[1-3]."$argument"/."$(basename $0)/" 2>/dev/null | grep .sh$ | wc -w) -gt 0 ]
				then
				    for script in $(eval ls "$projdbdir"/[1-3]."$argument"/."$(basename $0)"/*.sh 2>/dev/null )
				    do
					if [ -x $script ]
					then
					    scriptname=$(basename $script .sh)
					    echo "Script: $scriptname - $($0 run $argument $scriptname aboutme)"
					fi
				    done
				fi
				if [ $(ls "$projdbdir/"[1-3]."$argument/.$(basename $0)/" 2>/dev/null | grep ^depends- | wc -w) -gt 0 ]
				then
				    for dependency in $(ls "$projdbdir/"[1-3]."$argument/.$(basename $0)/depends-"* 2>/dev/null )
				    do
					echo "Depends on: $(echo $dependency|cut -f 2- -d "-")"
				    done
				fi
 			    fi
			    echo
			fi
		esac
	    done
	fi
	;;

    do)
	if ([ -z "$2" ] || [ -n "$3" ])
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		mv "$projdbdir"/[1-3]."$2" "$workingdir"/"$2"
		clear
		$0 about "$2"
	    elif [ -d "$workingdir"/"$2" ]
	    then
		echo "You are already working on \"$2\"".
	    else
		echo "Sorry, cannot find \"$2\"!"
	    fi
	fi
	;;

    done)
	if [ -z "$2" ] || [ -n "$3" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		echo "You can only archive projects you're currently working on (in $workingdir)."
		exit 1
	    elif [ -d "$workingdir"/"$2" ]
	    then 
		timestamp=$(date +%Y-%m-%d)
		if [ -f "$backupsdir"/$timestamp."$2".tbz ]
		then
		    echo "You already archived \"$2\" today. You'll have to rename the project or (re)move the backup."
		    exit 1
		fi
		cd "$workingdir"
		tar -cjf "$backupsdir"/$timestamp."$2".tbz "$2" && rm -fr "$workingdir"/"$2"
		cd - >/dev/null
	    else
		printhelpmessage
		exit 1
	    fi
	fi
	;;

    kill)
	if [ -z "$2" ]||[ -n "$3" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$workingdir"/"$2" ]
	    then
		echo "Removing \""$2"\" from "$workingdir"."
		read -p "Sure?! (y/N) " answer
		if [ x"$answer" = "xY" ] || [ x"$answer" = "xy" ]
		then
		    rm -fr "$workingdir"/"$2"
		else
		    echo "Wise moove!"
		fi
	    else
		echo "You can only kill a project you are currently working on (in $workingdir)."
		exit 1
	    fi
	fi
	;;

    list|ls)
	case "$2" in
	    $category0number|$category0name)
	    echo "* $category0name:"
	    [ "$columnformat" = "Yes" ] && ls "$workingdir" | column || ls "$workingdir" -1
	    ;;
	    $category1number|$category1name)
	    echo "* $category1name:"
	    [ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category1number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category1number." | cut -f 2- -d "."
	    ;;
	    $category2number|$category2name)
	    echo "* $category2name:"
	    [ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category2number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category2number." | cut -f 2- -d "."
	    ;;
	    $category3number|$category3name)
	    echo "* $category3name:"
	    [ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category3number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category3number." | cut -f 2- -d "."
	    ;;
	    "")
		echo "* $category3name:"
		[ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category3number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category3number." | cut -f 2- -d "."
		echo ""
		echo "* $category2name:"
		[ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category2number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category2number." | cut -f 2- -d "."
		echo ""
		echo "* $category1name:"
		[ "$columnformat" = "Yes" ] && ls "$projdbdir" | grep "^$category1number." | cut -f 2- -d "." | column || ls "$projdbdir" | grep "^$category1number." | cut -f 2- -d "."
		echo ""
		echo "* $category0name:"
		[ "$columnformat" = "Yes" ] && ls "$workingdir" | column || ls "$workingdir" -1
		;;
	    *)
		printhelpmessage
		exit 1
	esac
	;;

    move|mv)
	if ([ -z "$2" ] || [ -z "$3" ] || [ -n "$4" ])
	then
	    printhelpmessage
	    exit 1
	elif ([ ! -d "$workingdir/$2" ] && [ ! -d "$projdbdir/"[1-3]".$2" ])
	then
	    echo "Sorry, cannot find \"$2\"!"
	    exit 1
	elif [ -f "$workingdir/$2/.hidden" ]
	then
	    printstandardproject
	else
	    case "$3" in
		$category0number|$category0name)
		if [ -d "$projdbdir"/[1-3]."$2" ]
		then
		    mv "$projdbdir"/[1-3]."$2" "$workingdir"/"$2"
		else
		    [ -d "$workingdir"/"$2" ] && echo "\"$2\" is already in \""$category0name"\"."; exit 1
		fi
		;;
		$category1number|$category1name)
		if [ -d "$projdbdir"/[23]."$2" ]
		then
		    mv "$projdbdir"/[23]."$2" "$projdbdir"/1."$2"
		elif [ -d "$workingdir"/"$2" ]
		then
		    mv "$workingdir"/"$2" "$projdbdir"/1."$2"
		else
		    [ -d "$projdbdir"/1."$2" ] && echo "\"$2\" is already in \""$category1name"\"."; exit 1
		fi
		;;
		$category2number|$category2name)
		if [ -d "$projdbdir"/[13]."$2" ]
		then
		    mv "$projdbdir"/[13]."$2" "$projdbdir"/2."$2"
		elif [ -d "$workingdir"/"$2" ]
		then
		    mv "$workingdir"/"$2" "$projdbdir"/2."$2"
		else
		    [ -d "$projdbdir"/2."$2" ] && echo "\"$2\" is already in \""$category2name"\"."; exit 1
		fi
		;;
		$category3number|$category3name)
		if [ -d "$projdbdir"/[12]."$2" ]
		then
		    mv "$projdbdir"/[12]."$2" "$projdbdir"/3."$2"
		elif [ -d "$workingdir"/"$2" ]
		then
		    mv "$workingdir"/"$2" "$projdbdir"/3."$2"
		else
		    [ -d "$projdbdir"/3."$2" ] && echo "\"$2\" is already in \""$category3name"\"."; exit 1
		fi
		;;
		*)
		printhelpmessage
		exit 1
	    esac
	fi
	;;

    new)
	if [ -z "$2" ]
	then
	    read -p "Enter the name you want your project to have: " newprojectname
	    if [ "x$newprojectname" = "x" ]
	    then
		printhelpmessage
		exit 1
	    elif ([ -d "$workingdir"/"$newprojectname" ] || [ -d "$projdbdir"/[1-3]."$newprojectname" ])
	    then
		echo "There is already another project called \""$newprojectname"\"."
		exit 1
	    fi
	    echo "Creating \""$newprojectname"\" in "$workingdir"."
	    mkdir "$workingdir"/"$newprojectname"
	    mkdir "$workingdir"/"$newprojectname"/trash
	    mkdir "$workingdir"/"$newprojectname"/."$(basename "$0")"
	    touch "$workingdir"/"$newprojectname"/README
	    touch "$workingdir"/"$newprojectname"/TODO
	    [ x$gitinstalled = x"Yes" ] && git init "$workingdir"/"$newprojectname"/ -q
	    [ x$gitinstalled = x"Yes" ] && echo trash > "$workingdir"/"$newprojectname"/.gitignore
	elif [ -n "$3" ]
	then
	    printhelpmessage
	    exit 1
	elif ([ -d "$workingdir"/"$2" ] || [ -d "$projdbdir"/[1-3]."$2" ])
	then
	    echo "There is already another project called \""$2"\"."
	    exit 1
	else
	    echo "Creating \""$2"\" in "$workingdir"."
	    mkdir "$workingdir"/"$2"
	    mkdir "$workingdir"/"$2"/trash
	    mkdir "$workingdir"/"$2"/."$(basename "$0")"
	    touch "$workingdir"/"$2"/README
	    touch "$workingdir"/"$2"/TODO
	    [ x$gitinstalled = x"Yes" ] && git init "$workingdir"/"$2"/ -q
	    [ x$gitinstalled = x"Yes" ] && echo trash > "$workingdir"/"$2"/.gitignore
	fi
	;;

    next)
	case $2 in
	    *[0-9]*)
		numberoftasks=$2
		if [ $numberoftasks -eq 0 ]
		then
		    partialmessage="* Not printing any tasks for "
		elif [ $numberoftasks -eq 1 ]
		then
		    partialmessage="* Next task for "
		else
		    partialmessage="* Next $numberoftasks tasks for "
		fi
		shift 2
		;;
	    *)
		numberoftasks=1
		partialmessage="* Next task for "
		shift
		;;
	esac
	if [ -z "$*" ]
	then
	    echo "$partialmessage""each project under \"$category0name\":"
	    for project in $workingdir/*
	    do
		if [ -r $project/TODO ]
		then
		    echo "- $(basename $project):"
		    grep -h -m $numberoftasks ^"*\ TODO" "$project/TODO" | cut -f 3- -d " "
		else
		    echo "- $(basename $project):"
		    echo "You didn't provide a TODO file for $(basename $project) yet!"
		fi
	    done
	else
	    for project in "$@"
	    do
		case $project in
		    $category0number|$category0name)
		    echo "$partialmessage each project under \"$category0name\":"
		    for subproject in $workingdir/*
		    do
			if [ -r $subproject/TODO ]
			then
			    echo "- $(basename $subproject):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$subproject/TODO" | cut -f 3- -d " "
			else
			    echo "- $(basename $subproject):"
			    echo "You didn't provide a TODO file for $(basename $subproject) yet!"
			fi
		    done
		    ;;
		    $category1number|$category1name)
		    echo "$partialmessage each project under \"$category1name\":"
		    for subproject in $projdbdir/$category1number.*
		    do
			if [ -r $subproject/TODO ]
			then
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$subproject/TODO" | cut -f 3- -d " "
			else
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    echo "You didn't provide a TODO file for $(basename $subproject|cut -f 2- -d ".") yet!"
			fi
		    done
		    ;;
		    $category2number|$category2name)
		    echo "$partialmessage each project under \"$category2name\":"
		    for subproject in $projdbdir/$category2number.*
		    do
			if [ -r $subproject/TODO ]
			then
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$subproject/TODO" | cut -f 3- -d " "
			else
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    echo "You didn't provide a TODO file for $(basename $subproject|cut -f 2- -d ".") yet!"
			fi
		    done
		    ;;
		    $category3number|$category3name)
		    echo "$partialmessage each project under \"$category3name\":"
		    for subproject in $projdbdir/$category3number.*
		    do
			if [ -r $subproject/TODO ]
			then
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$subproject/TODO" | cut -f 3- -d " "
			else
			    echo "- $(basename $subproject|cut -f 2- -d "."):"
			    echo "You didn't provide a TODO file for $(basename $subproject|cut -f 2- -d ".") yet!"
			fi
		    done
		    ;;
		    *)
			if [ -r "$projdbdir/"[1-3]".$project/TODO" ]
			then
			    echo "* $(basename "$projdbdir/"[1-3]".$project/"|cut -f 2- -d "."):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$projdbdir/"[1-3]".$project/TODO" | cut -f 3- -d " "
			elif [ -r "$workingdir/$project/TODO" ]
			then
			    echo "* $(basename "$workingdir/$project/"):"
			    grep -h -m $numberoftasks ^"*\ TODO" "$workingdir/$project/TODO" | cut -f 3- -d " "
			elif ([ ! -d "$workingdir/$project/" ] && [ ! -d "$projdbdir/"[1-3]".$project/" ])
			then
			    echo "Sorry, cannot find \"$project\"!"
			else
			    echo "* $(basename "$projdbdir/"[1-3]".$project"|cut -f 2- -d "."): "
			    echo "You didn't provide a TODO file for $(basename $project|cut -f 2- -d ".") yet!"
			fi
			;;
		esac	    
	    done
	fi
	;;

    rename)
	if [ -z "$2" ] || [ -z "$3" ] || [ -n "$4" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ ! -d "$workingdir"/"$2" ]
	    then
		echo "You can only rename projects you are currently working on!"
		exit 1
	    elif  [ -d "$workingdir"/"$3" ] || [ -d "$projdbdir"/[1-3]."$3" ]
	    then
		echo "You already have a project named \"$3\"."
		exit 1
	    else
		mv "$workingdir"/"$2" "$workingdir"/"$3"
	    fi
	fi
	;;

    ressurrect)
	if [ -z "$2" ] || [ -n "$3" ]
	then
	    printhelpmessage
	    exit 1
	else
	    lastbackup=$(ls -1 "$backupsdir"/[0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]."$2".tbz 2>/dev/null | sort | tail -n 1)
	    if [ -z "$lastbackup" ]
	    then
		echo "Gravedigger said he knows of no burried project by that name."
		exit 1
	    elif [ -d "$workingdir"/"$2" ] || [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		echo "There can be only one!"
		exit 1
	    elif [ ! -r "$lastbackup" ]
	    then
		echo "Cannot access the corpese of \"$2\"."
		exit 1
	    elif [ -r "$lastbackup" ]
	    then 
		cd "$workingdir"
		tar -xjf "$lastbackup"
		cd - >/dev/null
	    else
		printhelpmessage
		exit 1
	    fi
	fi
	;;

    run)
	if [ -z "$2" ] || [ -z "$3" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$workingdir"/"$2" ] || [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		if [ -x "$workingdir"/"$2"/".$(basename $0)"/"$3.sh" ]
		then
		    projectname=$2
		    scriptname=$3
		    shift
		    shift
		    shift
		    "$workingdir"/"$projectname"/".$(basename $0)"/"$scriptname.sh" "$@"
		elif [ -x "$projdbdir"/[1-3]."$2"/".$(basename $0)"/"$3.sh" ]
		then
		    projectname=$2
		    scriptname=$3
		    shift
		    shift
		    shift
		    "$projdbdir"/[1-3]."$projectname"/".$(basename $0)"/"$scriptname.sh" "$@"
		else
		    echo "Something whent wrong. Are you sure \"$2\" has a script named \"$3.sh\"?"
		    exit 1
		fi
	    else
		printhelpmessage
		exit 1
	    fi
	fi
	;;

    search)
	if [ -z "$2" ]
	then
	    printhelpmessage
	    exit 1
	else
	    echo "Projects named \"$2\":"
	    ls -1 "$workingdir"|grep "$2"
	    ls "$projdbdir"|grep "$2"
	    echo ""
	    echo "Projects mentioning \""$2"\":"
	    grep "$2" "$workingdir"/*/README "$workingdir"/*/TODO "$projdbdir"/*/README "$projdbdir"/*/TODO
	fi
	;;

    show)
	if [ -z "$2" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$workingdir"/"$2" ]
	    then
		$displayer "$workingdir"/"$2"/README 2>/dev/null || echo "You didn't provide a README file for \"$2\" yet!"
	    elif [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		$displayer "$projdbdir"/[1-3]."$2"/README 2>/dev/null || echo "You didn't provide a README file for \"$2\" yet!"
	    else
		echo "Sorry, cannot find \"$2\"!"
		exit 1
	    fi
	    
	fi
	;;

    todo)
	if [ -z "$2" ]
	then
	    printhelpmessage
	    exit 1
	else
	    if [ -d "$workingdir"/"$2" ]
	    then
		$displayer "$workingdir"/"$2"/TODO 2>/dev/null || echo "You didn't provide a TODO file for \"$2\" yet!"
	    elif [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		$displayer "$projdbdir"/[1-3]."$2"/TODO 2>/dev/null || echo "You didn't provide a TODO file for \"$2\" yet!"
	    else
		echo "Sorry, cannot find \"$2\"!"
		exit 1
	    fi
	    
	fi
	;;

    undone)
	if [ -z "$2" ] || [ -n "$3" ]
	then
	    printhelpmessage
	    exit 1
	else
	    lastbackup=$(ls -1 "$backupsdir"/[0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]."$2".tbz 2>/dev/null | sort | tail -n 1)
	    if [ -z "$lastbackup" ]
	    then
		echo "You can only undo projects you've done and archived."
		exit 1
	    elif [ -d "$workingdir"/"$2" ] || [ -d "$projdbdir"/[1-3]."$2" ]
	    then
		echo "You already have a project named \"$2\". You have to deal with it first."
		exit 1
	    elif [ ! -r "$lastbackup" ]
	    then
		echo "Cannot read latest backup of \"$2\"."
		exit 1
	    elif [ -r "$lastbackup" ]
	    then 
		cd "$workingdir"
		tar -xjf "$lastbackup" && rm "$lastbackup"
		cd - >/dev/null
	    else
		printhelpmessage
		exit 1
	    fi
	fi
	;;

    *)
	printhelpmessage
	exit 1
	;;

esac
exit 0
